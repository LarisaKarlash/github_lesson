// <auto-generated />
using System;
using CountryZip.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CountryZip.Migrations
{
    [DbContext(typeof(ObjCountryDBContext))]
    partial class ObjCountryDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CountryZip.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CountryZip.Models.CountryNsi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExampleURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Range")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CountriesNsi");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "AD",
                            Country = "Andorra",
                            ExampleURL = "api.zippopotam.us/AD/AD100",
                            Range = "AD100:AD700"
                        },
                        new
                        {
                            Id = 2,
                            Code = "AR",
                            Country = "Argentina",
                            ExampleURL = "api.zippopotam.us/AR/1601",
                            Range = "1601:9431"
                        },
                        new
                        {
                            Id = 3,
                            Code = "AS",
                            Country = "American Samoa",
                            ExampleURL = "api.zippopotam.us/AS/96799",
                            Range = "96799:96799"
                        },
                        new
                        {
                            Id = 4,
                            Code = "AT",
                            Country = "Austria",
                            ExampleURL = "api.zippopotam.us/AT/1010",
                            Range = "1010:9992"
                        },
                        new
                        {
                            Id = 5,
                            Code = "AU",
                            Country = "Australia",
                            ExampleURL = " api.zippopotam.us/AU/0200",
                            Range = "0200:9726"
                        },
                        new
                        {
                            Id = 6,
                            Code = "BD",
                            Country = "Bangladesh",
                            ExampleURL = "api.zippopotam.us/BD/1000",
                            Range = "1000:9461"
                        },
                        new
                        {
                            Id = 7,
                            Code = "BE",
                            Country = "Belgium",
                            ExampleURL = "api.zippopotam.us/BE/1000",
                            Range = "1000:9992"
                        },
                        new
                        {
                            Id = 8,
                            Code = "BG",
                            Country = "Bulgaria",
                            ExampleURL = "api.zippopotam.us/BG/1000",
                            Range = "1000:9974"
                        },
                        new
                        {
                            Id = 9,
                            Code = "BR",
                            Country = "Brazil",
                            ExampleURL = "api.zippopotam.us/BR/01000-000",
                            Range = "01000-000:99990-000"
                        },
                        new
                        {
                            Id = 10,
                            Code = "CA",
                            Country = "Canada",
                            ExampleURL = "api.zippopotam.us/CA/A0A",
                            Range = "A0A:Y1A"
                        },
                        new
                        {
                            Id = 11,
                            Code = "CH",
                            Country = "Switzerland",
                            ExampleURL = "api.zippopotam.us/CH/1000",
                            Range = "1000:9658"
                        },
                        new
                        {
                            Id = 12,
                            Code = "CZ",
                            Country = "Czech Republic",
                            ExampleURL = "api.zippopotam.us/CZ/10000",
                            Range = "10000:79862"
                        },
                        new
                        {
                            Id = 13,
                            Code = "DE",
                            Country = "Germany",
                            ExampleURL = "api.zippopotam.us/DE/01067",
                            Range = "01067:99998"
                        },
                        new
                        {
                            Id = 14,
                            Code = "DK",
                            Country = "Denmark",
                            ExampleURL = "api.zippopotam.us/DK/0800",
                            Range = "0800:9990"
                        },
                        new
                        {
                            Id = 15,
                            Code = "DO",
                            Country = "Dominican Republic",
                            ExampleURL = "api.zippopotam.us/DO/10101",
                            Range = "10101:11906"
                        },
                        new
                        {
                            Id = 16,
                            Code = "ES",
                            Country = "Spain",
                            ExampleURL = "api.zippopotam.us/ES/01001",
                            Range = "01001:52080"
                        },
                        new
                        {
                            Id = 17,
                            Code = "FI",
                            Country = "Finland",
                            ExampleURL = "api.zippopotam.us/FI/00002",
                            Range = "00002:99999"
                        },
                        new
                        {
                            Id = 18,
                            Code = "FO",
                            Country = "Faroe Islands",
                            ExampleURL = "api.zippopotam.us/FO/100",
                            Range = "100:970"
                        },
                        new
                        {
                            Id = 19,
                            Code = "FR",
                            Country = "France",
                            ExampleURL = "api.zippopotam.us/FR/01000",
                            Range = "01000:98799"
                        },
                        new
                        {
                            Id = 20,
                            Code = "GB",
                            Country = "Great Britain",
                            ExampleURL = "api.zippopotam.us/GB/AB1",
                            Range = "AB1:ZE3"
                        },
                        new
                        {
                            Id = 21,
                            Code = "GF",
                            Country = "French Guyana",
                            ExampleURL = "api.zippopotam.us/GF/97300",
                            Range = "97300:97390"
                        },
                        new
                        {
                            Id = 22,
                            Code = "GG",
                            Country = "Guernsey",
                            ExampleURL = "api.zippopotam.us/GG/GY1",
                            Range = "GY1:GY9"
                        },
                        new
                        {
                            Id = 23,
                            Code = "GL",
                            Country = "Greenland",
                            ExampleURL = "api.zippopotam.us/GL/2412",
                            Range = "2412:3992"
                        },
                        new
                        {
                            Id = 24,
                            Code = "GP",
                            Country = "Guadeloupe",
                            ExampleURL = "api.zippopotam.us/GP/97100",
                            Range = "97100:97190"
                        },
                        new
                        {
                            Id = 25,
                            Code = "GT",
                            Country = "Guatemala",
                            ExampleURL = "api.zippopotam.us/GT/01001",
                            Range = "01001:22027"
                        },
                        new
                        {
                            Id = 26,
                            Code = "GU",
                            Country = "Guam",
                            ExampleURL = "api.zippopotam.us/GU/96910",
                            Range = "96910:96932"
                        },
                        new
                        {
                            Id = 27,
                            Code = "GY",
                            Country = "Guyana",
                            ExampleURL = "api.zippopotam.us/GY/97312",
                            Range = "97312:97360"
                        },
                        new
                        {
                            Id = 28,
                            Code = "HR",
                            Country = "Croatia",
                            ExampleURL = "api.zippopotam.us/HR/10000",
                            Range = "10000:53296"
                        },
                        new
                        {
                            Id = 29,
                            Code = "HU",
                            Country = "Hungary",
                            ExampleURL = "api.zippopotam.us/HU/1011",
                            Range = "1011:9985"
                        },
                        new
                        {
                            Id = 30,
                            Code = "IM",
                            Country = "Isle of Man",
                            ExampleURL = "api.zippopotam.us/IM/IM1",
                            Range = "IM1:IM9"
                        },
                        new
                        {
                            Id = 31,
                            Code = "IN",
                            Country = "India",
                            ExampleURL = "api.zippopotam.us/IN/110001",
                            Range = "110001:855126"
                        },
                        new
                        {
                            Id = 32,
                            Code = "IS",
                            Country = "Iceland",
                            ExampleURL = "api.zippopotam.us/IS/101",
                            Range = "101:902"
                        },
                        new
                        {
                            Id = 33,
                            Code = "IT",
                            Country = "Italy",
                            ExampleURL = "api.zippopotam.us/IT/00010",
                            Range = "00010:98168"
                        },
                        new
                        {
                            Id = 34,
                            Code = "JE",
                            Country = "Jersey",
                            ExampleURL = "api.zippopotam.us/JE/JE1",
                            Range = "JE1:JE3"
                        },
                        new
                        {
                            Id = 35,
                            Code = "JP",
                            Country = "Japan",
                            ExampleURL = "api.zippopotam.us/JP/100-0001",
                            Range = "100-0001:999-8531"
                        },
                        new
                        {
                            Id = 36,
                            Code = "LI",
                            Country = "Liechtenstein",
                            ExampleURL = "api.zippopotam.us/LI/9485",
                            Range = "9485:9498"
                        },
                        new
                        {
                            Id = 37,
                            Code = "LK",
                            Country = "Sri Lanka",
                            ExampleURL = "api.zippopotam.us/LK/*",
                            Range = "*:96167"
                        },
                        new
                        {
                            Id = 38,
                            Code = "LT",
                            Country = "Lithuania",
                            ExampleURL = "api.zippopotam.us/LT/00001",
                            Range = "00001:99069"
                        },
                        new
                        {
                            Id = 39,
                            Code = "LU",
                            Country = "Luxembourg",
                            ExampleURL = "api.zippopotam.us/LU/L-1009",
                            Range = "L-1009:L-9999"
                        },
                        new
                        {
                            Id = 40,
                            Code = "MC",
                            Country = "Monaco",
                            ExampleURL = "api.zippopotam.us/MC/98000",
                            Range = "98000:98000"
                        },
                        new
                        {
                            Id = 41,
                            Code = "MD",
                            Country = "Moldavia",
                            ExampleURL = "api.zippopotam.us/MD/MD-2000",
                            Range = "MD-2000:MD-7731"
                        },
                        new
                        {
                            Id = 42,
                            Code = "MH",
                            Country = "Marshall Islands",
                            ExampleURL = "api.zippopotam.us/MH/96960",
                            Range = "96960:96970"
                        },
                        new
                        {
                            Id = 43,
                            Code = "MK",
                            Country = "Macedonia",
                            ExampleURL = "api.zippopotam.us/MK/1000",
                            Range = "1000:7550"
                        },
                        new
                        {
                            Id = 44,
                            Code = "MP",
                            Country = "Northern Mariana Islands",
                            ExampleURL = "api.zippopotam.us/MP/96950",
                            Range = "96950:96952"
                        },
                        new
                        {
                            Id = 45,
                            Code = "MQ",
                            Country = "Martinique",
                            ExampleURL = "api.zippopotam.us/MQ/97200",
                            Range = "97200:97290"
                        },
                        new
                        {
                            Id = 46,
                            Code = "MX",
                            Country = "Mexico",
                            ExampleURL = "api.zippopotam.us/MX/01000",
                            Range = "01000:99998"
                        },
                        new
                        {
                            Id = 47,
                            Code = "MY",
                            Country = "Malaysia",
                            ExampleURL = "api.zippopotam.us/MY/01000",
                            Range = "01000:98859"
                        },
                        new
                        {
                            Id = 48,
                            Code = "NL",
                            Country = "Holland",
                            ExampleURL = "api.zippopotam.us/NL/1000",
                            Range = "1000:9999"
                        },
                        new
                        {
                            Id = 49,
                            Code = "NO",
                            Country = "Norway",
                            ExampleURL = "api.zippopotam.us/NO/0001",
                            Range = "0001:9991"
                        },
                        new
                        {
                            Id = 50,
                            Code = "NZ",
                            Country = "New Zealand",
                            ExampleURL = "api.zippopotam.us/NZ/0110",
                            Range = "0110:9893"
                        },
                        new
                        {
                            Id = 51,
                            Code = "PH",
                            Country = "Phillippines",
                            ExampleURL = "api.zippopotam.us/PH/0400",
                            Range = "0400:9811"
                        },
                        new
                        {
                            Id = 52,
                            Code = "PK",
                            Country = "Pakistan",
                            ExampleURL = "api.zippopotam.us/PK/10010",
                            Range = "10010:97320"
                        },
                        new
                        {
                            Id = 53,
                            Code = "PL",
                            Country = "Poland",
                            ExampleURL = "api.zippopotam.us/PL/00-001",
                            Range = "00-001:99-440"
                        },
                        new
                        {
                            Id = 54,
                            Code = "PM",
                            Country = "Saint Pierre and Miquelon",
                            ExampleURL = "api.zippopotam.us/PM/97500",
                            Range = "97500:97500"
                        },
                        new
                        {
                            Id = 55,
                            Code = "PR",
                            Country = "Puerto Rico",
                            ExampleURL = "api.zippopotam.us/PR/00601",
                            Range = "00601:00988"
                        },
                        new
                        {
                            Id = 56,
                            Code = "PT",
                            Country = "Portugal",
                            ExampleURL = "api.zippopotam.us/PT/1000-001",
                            Range = "1000-001:9980-999"
                        },
                        new
                        {
                            Id = 57,
                            Code = "RE",
                            Country = "French Reunion",
                            ExampleURL = "api.zippopotam.us/RE/97400",
                            Range = "97400:97490"
                        },
                        new
                        {
                            Id = 58,
                            Code = "RU",
                            Country = "Russia",
                            ExampleURL = "api.zippopotam.us/RU/101000",
                            Range = "101000:901993"
                        },
                        new
                        {
                            Id = 59,
                            Code = "SE",
                            Country = "Sweden",
                            ExampleURL = "api.zippopotam.us/SE/10005",
                            Range = "10005:98499"
                        },
                        new
                        {
                            Id = 60,
                            Code = "SI",
                            Country = "Slovenia",
                            ExampleURL = "api.zippopotam.us/SI/1000",
                            Range = "1000:9600"
                        },
                        new
                        {
                            Id = 61,
                            Code = "SJ",
                            Country = "Svalbard & Jan Mayen Islands",
                            ExampleURL = "api.zippopotam.us/SJ/8099",
                            Range = "8099:9178"
                        },
                        new
                        {
                            Id = 62,
                            Code = "SK",
                            Country = "Slovak Republic",
                            ExampleURL = "api.zippopotam.us/SK/01001",
                            Range = "01001:99201"
                        },
                        new
                        {
                            Id = 63,
                            Code = "SM",
                            Country = "San Marino",
                            ExampleURL = "api.zippopotam.us/SM/47890",
                            Range = "47890:47899"
                        },
                        new
                        {
                            Id = 64,
                            Code = "TH",
                            Country = "Thailand",
                            ExampleURL = "api.zippopotam.us/TH/10100",
                            Range = "10100:96220"
                        },
                        new
                        {
                            Id = 65,
                            Code = "TR",
                            Country = "Turkey",
                            ExampleURL = "api.zippopotam.us/TR/01000",
                            Range = "01000:81950"
                        },
                        new
                        {
                            Id = 66,
                            Code = "US",
                            Country = "United States",
                            ExampleURL = "api.zippopotam.us/US/00210",
                            Range = "00210:99950"
                        },
                        new
                        {
                            Id = 67,
                            Code = "VA",
                            Country = "Vatican",
                            ExampleURL = "api.zippopotam.us/VA/00120",
                            Range = "00120:00120"
                        },
                        new
                        {
                            Id = 68,
                            Code = "VI",
                            Country = "Virgin Islands",
                            ExampleURL = "api.zippopotam.us/VI/00801",
                            Range = "00801:00851"
                        },
                        new
                        {
                            Id = 69,
                            Code = "YT",
                            Country = "Mayotte",
                            ExampleURL = "api.zippopotam.us/YT/97600",
                            Range = "97600:97680"
                        },
                        new
                        {
                            Id = 70,
                            Code = "ZA",
                            Country = "South Africa",
                            ExampleURL = "api.zippopotam.us/ZA/0002",
                            Range = "0002:9992"
                        });
                });

            modelBuilder.Entity("CountryZip.Models.CountryZp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryAbbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryNsiId")
                        .HasColumnType("int");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryNsiId");

                    b.ToTable("CountriesZp");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "United States",
                            CountryAbbreviation = "56",
                            CountryNsiId = 66,
                            PostCode = "90210"
                        });
                });

            modelBuilder.Entity("CountryZip.Models.PlaceZp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryZpId")
                        .HasColumnType("int");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateAbbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryZpId");

                    b.ToTable("PlacesZp");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryZpId = 1,
                            Latitude = "34.0901",
                            Longitude = "-118.4065",
                            PlaceName = "Beverly Hills",
                            State = "California",
                            StateAbbreviation = "CA"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CountryZip.Models.CountryZp", b =>
                {
                    b.HasOne("CountryZip.Models.CountryNsi", "CountryNsi")
                        .WithMany("CountriesZp")
                        .HasForeignKey("CountryNsiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountryNsi");
                });

            modelBuilder.Entity("CountryZip.Models.PlaceZp", b =>
                {
                    b.HasOne("CountryZip.Models.CountryZp", "CountryZp")
                        .WithMany("PlacesZp")
                        .HasForeignKey("CountryZpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountryZp");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CountryZip.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CountryZip.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CountryZip.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CountryZip.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryZip.Models.CountryNsi", b =>
                {
                    b.Navigation("CountriesZp");
                });

            modelBuilder.Entity("CountryZip.Models.CountryZp", b =>
                {
                    b.Navigation("PlacesZp");
                });
#pragma warning restore 612, 618
        }
    }
}
